
import uuid
from flask import Flask, request
from flask_smorest import abort 
from db import stores, items 
import json

app = Flask(__name__)

#set default route  http://127.0.0.1:5000/
@app.get("/")
def default():
    return "Welcome to Flask API ..."

#get stores    
@app.get("/store")
def get_stores():
    return { "stores": list(stores.values()) }

#get store by store_id
@app.get("/store/<string:store_id>")
def get_store(store_id):
    try: 
        return stores[store_id]
    except KeyError: 
        abort(404, message="Store not found.")
        #return {"mesage": "store not found."}, 404


#create store
@app.post("/store")
def create_store():
    store_data = request.get_json()

    #print(store_data)
    num_keys = len(store_data.keys())

    #print("store_data_keys = ", num_keys)

    #create a unique store_id
    if num_keys == 1 and "name" in store_data :
       for store in stores.values():
           if ( store_data["name"] == store["name"]):
                abort(400,
                      message="Store already exists.")
       
       store_id = uuid.uuid4().hex
       store = {**store_data, "id": store_id}
       stores[store_id] = store
       return store,201 
    abort(400,
          message="Bad request. 'name' must be present in the JSON Payload")
    
    
#delete store
@app.delete("/store/<string:store_id>")
def delete_store(store_id):
    try:
         del stores[store_id]
         return {"message": "Stored deleted !! Store_ID: " + store_id }
    except KeyError:
        abort(404, 
              message = "Store not Found.")
        

#get items
@app.get("/item")
def get_all_items():
    return {"items": list(items.values())}


#get item by item_id
@app.get("/item/<string:item_id>")
def get_item(item_id):
    try:
        return items[item_id]
    except KeyError:
        abort(404,
              message = "Item_id not found.")
        




#create item
@app.post("/item")
def create_item():
    item_data = request.get_json()
    print("ITEM_DATA = " , item_data)
    
    #check if the store_id, price,name  are present in the request data

    if ( "store_id" not in item_data
        or "price" not in item_data
        or "name" not in item_data
    ): 
        abort(400,
              message="Bad request. Ensure 'store_id','price','name' present in the JSON Playload", )
    
        #return {"message": "store_id is required"}, 404

    for item in items.values() :
        if ( item_data["name"] == item["name"] 
            and 
            item_data["store_id"] == item["store_id"] 
        ):
            abort(400, 
                  message= "Item already exists.")
            
    if item_data[ "store_id" ] not in stores: 
        abort(404, message="Store not found.")
        #return {"message": "store not found."}, 404
    
    #create unique item_id
    item_id = uuid.uuid4().hex
    item = {**item_data, "id": item_id}
    items[item_id] = item
    print(items)
    return item, 201



#delete item
@app.delete("/item/<string:item_id>")
def delete_item(item_id): 
    try: 
        del items[item_id]
        return {"message": "Item deleted !! Item_ID: " + item_id }
    except KeyError:
        abort (404, 
               message = "Item not found.")
        
#update items
@app.put("/item/<string:item_id>")
def update_item(item_id):
    item_data = request.get_json()
    if ( "price" not in item_data 
        or 
        "name" not in item_data ): 
        abort(400, 
              "Bad Request, Ensure 'price' and 'name' are present in the request data.")
    try: 
        item = items[item_id]
        #print(item)
        item |= item_data
        return {"message" : "Item updated."}
    except KeyError:
        abort(404, 
              messsage = "Item_ID not Found.") 




